import React, { useState, useEffect } from 'react';
import './App.css';

const Chat = () => {
  const [isOpen, setIsOpen] = useState(false);
  const [isTyping, setIsTyping] = useState(false);
  const [messages, setMessages] = useState([]);
  const [inputValue, setInputValue] = useState('');
  const [selectedQuestion, setSelectedQuestion] = useState(null);
  const [greeted, setGreeted] = useState(false);

  useEffect(() => {
    const fetchMessages = async () => {
      try {
        const response = await fetch('/api/messages');
        const data = await response.json();
        setMessages(data);
      } catch (error) {
        console.error('Error fetching messages:', error);
      }
    };
    fetchMessages();
  }, []);

  const handleOpen = () => {
    setIsOpen(true);
    if (!greeted) {
      setIsTyping(true);
      setTimeout(() => {
        setIsTyping(false);
        setMessages((prevMessages) => [
          ...prevMessages,
          { text: '–ü—Ä–∏–≤—ñ—Ç!', sender: 'chat' },
          { text: '–ß–∏–º —è –≤–∞–º –º–æ–∂—É –¥–æ–ø–æ–º–æ–≥—Ç–∏?', sender: 'chat' }
        ]);
        setGreeted(true);
      }, 2000);
    }
  };

  const handleClose = () => {
    setIsOpen(false);
    setSelectedQuestion(null);
    setInputValue('');
  };

  const handleSelectQuestion = (question) => {
    if (question !== '–°–≤–æ—î –ø–∏—Ç–∞–Ω–Ω—è') {
      setSelectedQuestion(question);
      setIsTyping(true);
      setMessages((prevMessages) => [...prevMessages, { text: question, sender: 'user' }]);
      setTimeout(() => {
        setIsTyping(false);
        setMessages((prevMessages) => [...prevMessages, { text: getAnswer(question), sender: 'chat' }]);
      }, 1000);
    } else {
      setSelectedQuestion(question);
    }
  };

  const handleInputChange = (event) => {
    setInputValue(event.target.value);
  };

  const handleSendMessage = async () => {
    if (inputValue.trim() !== '') {
      setMessages((prevMessages) => [...prevMessages, { text: inputValue, sender: 'user' }]);
      setIsTyping(true);
      try {
        const response = await fetch('/api/send-message', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ message: inputValue }),
        });
        const data = await response.json();
        setTimeout(() => {
          setIsTyping(false);
          setMessages((prevMessages) => [
            ...prevMessages,
            { text: data.answer, sender: 'chat' },
            { text: '–î—è–∫—É—é –∑–∞ –≤–∞—à–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è!', sender: 'chat' }
          ]);
        }, 1000);
      } catch (error) {
        console.error('Error sending message:', error);
      }
      setInputValue('');
    }
  };

  const handleBackToQuestions = () => {
    setSelectedQuestion(null);
  };

  const getAnswer = (question) => {
    const today = new Date();
    const newYear = new Date(today.getFullYear() + 1, 0, 1);
    const diffTime = Math.abs(newYear - today);
    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
    const diffHours = Math.floor((diffTime % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
    const diffMinutes = Math.floor((diffTime % (1000 * 60 * 60)) / (1000 * 60));
    const diffSeconds = Math.floor((diffTime % (1000 * 60)) / 1000);

    const answers = {
      '–Ø–∫–∏–π —Å—å–æ–≥–æ–¥–Ω—ñ –¥–µ–Ω—å?': `–°—å–æ–≥–æ–¥–Ω—ñ ${today.toLocaleDateString('uk-UA', { day: 'numeric', month: 'long', year: 'numeric' })}`,
      '–Ø–∫–∞ –∑–∞—Ä–∞–∑ –≥–æ–¥–∏–Ω–∞?': `–ó–∞—Ä–∞–∑ ${today.toLocaleTimeString('uk-UA', { hour: '2-digit', minute: '2-digit' })}`,
      '–°–∫—ñ–ª—å–∫–∏ –¥–Ω—ñ–≤ –¥–æ –ù–æ–≤–æ–≥–æ –†–æ–∫—É?': `–î–æ –ù–æ–≤–æ–≥–æ –†–æ–∫—É –∑–∞–ª–∏—à–∏–ª–æ—Å—è ${diffDays} –¥–Ω—ñ–≤, ${diffHours} –≥–æ–¥–∏–Ω, ${diffMinutes} —Ö–≤–∏–ª–∏–Ω, ${diffSeconds} —Å–µ–∫—É–Ω–¥`,
    };
    return answers[question];
  };

  return (
    <>
      {isOpen ? (
        <div className="chat">
          <div className="chat-header">
            <button className="close-button" onClick={handleClose}>√ó</button>
          </div>
          <div className="chat-content">
            <div className="messages">
              {messages.map((message, index) => (
                <div
                  key={index}
                  className={`message ${message.sender === 'user' ? 'user-message' : 'chat-message'}`}
                >
                  {message.text}
                </div>
              ))}
              {isTyping && (
                <div className="typing">Typing...</div>
              )}
            </div>
            <div className="input-container">
              {selectedQuestion ? (
                selectedQuestion === '–°–≤–æ—î –ø–∏—Ç–∞–Ω–Ω—è' ? (
                  <>
                    <input
                      type="text"
                      value={inputValue}
                      onChange={handleInputChange}
                      placeholder="–í–≤–µ–¥—ñ—Ç—å —Å–≤–æ—î –ø–∏—Ç–∞–Ω–Ω—è"
                    />
                    <button onClick={handleSendMessage}>–í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏</button>
                    <button onClick={handleBackToQuestions}>–ù–∞–∑–∞–¥ –¥–æ –ø–∏—Ç–∞–Ω—å</button>
                  </>
                ) : (
                  <button onClick={handleBackToQuestions}>–ù–∞–∑–∞–¥ –¥–æ –ø–∏—Ç–∞–Ω—å</button>
                )
              ) : (
                <div className="questions">
                  <button onClick={() => handleSelectQuestion('–Ø–∫–∏–π —Å—å–æ–≥–æ–¥–Ω—ñ –¥–µ–Ω—å?')}>
                    –Ø–∫–∏–π —Å—å–æ–≥–æ–¥–Ω—ñ –¥–µ–Ω—å?
                  </button>
                  <button onClick={() => handleSelectQuestion('–Ø–∫–∞ –∑–∞—Ä–∞–∑ –≥–æ–¥–∏–Ω–∞?')}>
                    –Ø–∫–∞ –∑–∞—Ä–∞–∑ –≥–æ–¥–∏–Ω–∞?
                  </button>
                  <button onClick={() => handleSelectQuestion('–°–∫—ñ–ª—å–∫–∏ –¥–Ω—ñ–≤ –¥–æ –ù–æ–≤–æ–≥–æ –†–æ–∫—É?')}>
                    –°–∫—ñ–ª—å–∫–∏ –¥–Ω—ñ–≤ –¥–æ –ù–æ–≤–æ–≥–æ –†–æ–∫—É?
                  </button>
                  <button onClick={() => handleSelectQuestion('–°–≤–æ—î –ø–∏—Ç–∞–Ω–Ω—è')}>
                    –°–≤–æ—î –ø–∏—Ç–∞–Ω–Ω—è
                  </button>
                </div>
              )}
            </div>
          </div>
        </div>
      ) : (
        <button className="chat-icon" onClick={handleOpen}>
          üí¨
        </button>
      )}
    </>
  );
};

export default Chat;
